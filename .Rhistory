SYN_NAMES[j] <- paste(syn_check[[j]]$name, syn_check[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
}
syn_check[[1]]
syn_check[1]
syn_check
syn_check$name
for(i in 1:length(Species)){
id_var <- search_wcvp(Species[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(x, 1, 4), substr(sub("^\\S+\\s+", "", x), 1, 4))
for(j in 1:length(syn_check)){
SYN_NAMES[j] <- paste(syn_check[[j]]$name, syn_check[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
}
for(i in 1:length(Species)){
id_var <- search_wcvp(Species[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(x, 1, 4), substr(sub("^\\S+\\s+", "", x), 1, 4))
for(j in 1:length(syn_check)){
#  SYN_NAMES[j] <- paste(syn_check[[j]]$name, syn_check[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
}
View(PB_TAXA)
syn_check
for(i in 1:length(Species)){
id_var <- search_wcvp(Species[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check)){
#  SYN_NAMES[j] <- paste(syn_check[[j]]$name, syn_check[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
print("Done with Species",i)
}
for(i in 1:length(Species)){
id_var <- search_wcvp(Species[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check)){
#  SYN_NAMES[j] <- paste(syn_check[[j]]$name, syn_check[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
print("Done with Species")
}
warnings()
syn_check
syn_check[[1]]
syn_check[1]
syn_check
syn_check$synonyms
syn_check$synonyms[[1]]
for(i in 1:length(Species)){
id_var <- search_wcvp(Species[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check)){
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
print("Done with Species")
}
syn_check$synonyms[[1]]
syn_check$synonyms[[1]]
length(syn_check)
length(syn_check$synonyms)
syn_check$synonyms
syn_check
for(i in 1:length(Species)){
id_var <- search_wcvp(Species[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check$synonyms)){
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
print("Done with Species")
}
for(j in 1:length(syn_check$synonyms)){
if(length(syn_check$synonyms) == 0){
next
}
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
for(i in 1:length(Species)){
id_var <- search_wcvp(Species[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check$synonyms)){
if(length(syn_check$synonyms) == 0){
next
}
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
print("Done with Species")
}
SPECIES <- read_lines("./../data/species.txt") # read species txt
library(kewr)
library(readr)
SPECIES <- read_lines("./../data/species.txt") # read species txt
PB_TAXA <- data.frame(TAXON_ID=rep(NA,length(SPECIES)),
FULL_NAME=rep(NA,length(SPECIES)),
FAMILY=rep(NA,length(SPECIES)),
SYNONYMS=rep(NA,length(SPECIES)))
SYN_NAMES = c()
for(i in 1:length(SPECIES)){
id_var <- search_wcvp(SPECIES[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check$synonyms)){
if(length(syn_check$synonyms) == 0){
next
}
# need to fix this
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
print("Done with Species")
}
PB_TAXA$FAMILY[1] <- SYN_NAMES
paste(SYN_NAMES, collapse = ", ")
SPECIES <- read_lines("./../data/species.txt") # read species txt
PB_TAXA <- data.frame(TAXON_ID=rep(NA,length(SPECIES)),
FULL_NAME=rep(NA,length(SPECIES)),
FAMILY=rep(NA,length(SPECIES)),
SYNONYMS=rep(NA,length(SPECIES)))
SYN_NAMES = c()
for(i in 1:length(SPECIES)){
id_var <- search_wcvp(SPECIES[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check$synonyms)){
if(length(syn_check$synonyms) == 0){
next
}
# need to fix this
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
PB_TAXA$FAMILY[i] <- paste(SYN_NAMES, collapse = ", ")
rm(SYN_NAMES)
SYN_NAMES = c()
print("Done with ", SPECIES[i])
}
printf("Done with ", SPECIES[i])
print0("Done with ", SPECIES[i])
print(paste0("Done with ", SPECIES[1]))
SPECIES <- read_lines("./../data/species.txt") # read species txt
PB_TAXA <- data.frame(TAXON_ID=rep(NA,length(SPECIES)),
FULL_NAME=rep(NA,length(SPECIES)),
FAMILY=rep(NA,length(SPECIES)),
SYNONYMS=rep(NA,length(SPECIES)))
SYN_NAMES = c()
for(i in 1:length(SPECIES)){
id_var <- search_wcvp(SPECIES[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check$synonyms)){
if(length(syn_check$synonyms) == 0){
next
}
# need to fix this
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
PB_TAXA$FAMILY[i] <- paste(SYN_NAMES, collapse = ", ")
rm(SYN_NAMES)
SYN_NAMES = c()
print(paste0("Done with ", SPECIES[i]))
}
SPECIES <- read_lines("./../data/species.txt") # read species txt
PB_TAXA <- data.frame(TAXON_ID=rep(NA,length(SPECIES)),
FULL_NAME=rep(NA,length(SPECIES)),
FAMILY=rep(NA,length(SPECIES)),
SYNONYMS=rep(NA,length(SPECIES)))
SYN_NAMES = c()
for(i in 1:length(SPECIES)){
id_var <- search_wcvp(SPECIES[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check$synonyms)){
if(length(syn_check$synonyms) == 0){
next
}
# need to fix this
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
PB_TAXA$SYNONYMS[i] <- paste(SYN_NAMES, collapse = ", ")
rm(SYN_NAMES)
SYN_NAMES = c()
print(paste0("Done with ", SPECIES[i]))
}
write.csv(PB_TAXA, file ="./../output/PB_TAXA.csv")
SPECIES <- read_lines("./../data/species.txt") # read species txt
PB_TAXA <- data.frame(TAXON_ID=rep(NA,length(SPECIES)),
FULL_NAME=rep(NA,length(SPECIES)),
FAMILY=rep(NA,length(SPECIES)),
SYNONYMS=rep(NA,length(SPECIES)))
SYN_NAMES = c()
for(i in 1:length(SPECIES)){
id_var <- search_wcvp(SPECIES[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check$synonyms)){
if(length(syn_check$synonyms) == 0){
next
}
# need to fix this
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- TAXON_ID
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
PB_TAXA$SYNONYMS[i] <- paste(SYN_NAMES, collapse = "; ")
rm(SYN_NAMES)
SYN_NAMES = c()
print(paste0("Done with ", SPECIES[i]))
}
SPECIES <- read_lines("./../data/species.txt") # read species txt
PB_TAXA <- data.frame(TAXON_ID=rep(NA,length(SPECIES)),
FULL_NAME=rep(NA,length(SPECIES)),
FAMILY=rep(NA,length(SPECIES)),
SYNONYMS=rep(NA,length(SPECIES)))
SYN_NAMES = c()
for(i in 1:length(SPECIES)){
id_var <- search_wcvp(SPECIES[i])
syn_check <- lookup_wcvp(tidy(id_var)$id[1]) # Grab the ID for WCVP
FULL_NAME <- paste(tidy(id_var)$name[1], tidy(id_var)$author[1])
FAMILY <- tidy(id_var)$family
X <- syn_check$name
TAXON_ID <- paste0(substr(X, 1, 4), substr(sub("^\\S+\\s+", "", X), 1, 4))
for(j in 1:length(syn_check$synonyms)){
if(length(syn_check$synonyms) == 0){
next
}
# need to fix this
SYN_NAMES[j] <- paste(syn_check$synonyms[[j]]$name, syn_check$synonyms[[j]]$author)
}
PB_TAXA$TAXON_ID[i] <- tolower(TAXON_ID)
PB_TAXA$FULL_NAME[i] <- FULL_NAME
PB_TAXA$FAMILY[i] <- FAMILY
PB_TAXA$SYNONYMS[i] <- paste(SYN_NAMES, collapse = "; ")
rm(SYN_NAMES)
SYN_NAMES = c()
print(paste0("Done with ", SPECIES[i]))
}
write.csv(PB_TAXA, file ="./../output/PB_TAXA.csv")
View(id_var)
View(syn_check)
install.packages("rgbif")
library("rgbif")
require(dismo)
maxent()
install.packages("rJava")
maxent()
fnames <- list.files(path="./../data/raster/", pattern = "asc")
fnames <- list.files(path="./../data/raster/", pattern = "asc", full.names = TRUE)
fnames <- list.files(path="./../data/raster/", pattern = "asc")
fnames <- list.files(path="./../data/raster/",
pattern = ".asc", full.names = TRUE)
fnames <- list.files(path="./../data/raster/",
pattern = ".asc$", full.names = TRUE)
predictors <- stack(fnames)
plot(predictors)
# load in our occurences
# we can replace the paste in the row below with a function variable
occurence <- paste("./../output/edible_plants/occurences_DAF_SUM.csv")
occ <- read.csv(occurence)
View(occ)
# We are gonna use 20% of the dataset as a testing sample
fold <- kfold(occ, k=5)
occtest <- occ[fold == 1, ]
occtrain <- occ[fold != 1, ]
me <- maxent(predictors, occtrain, factors='biome')
me <- maxent(predictors, occtrain, factors='SPECIES')
me <- maxent(predictors, occtrain)
# remove first column
occ <- occ[,2:3]
View(occtest)
View(occ)
# We are gonna use 20% of the dataset as a testing sample
fold <- kfold(occ, k=5)
occtest <- occ[fold == 1, ]
occtrain <- occ[fold != 1, ]
me <- maxent(predictors, occtrain)
me
# predict the entire dataset
r <- predict(me, predictors)
plot(r)
points(occ)
# testing
# background data
bg <- randomPoints(predictors, 1000)
e1 <- evaluate(me, p=occtest, a=bg, x=predictors)
pvtest <- data.frame(extract(predictors, occtest))
avtest <- data.frame(extract(predictors, bg))
e2 <- evaluate(me, p=pvtest, a=avtest)
e2
e1
# remove first column
if(ncol(occ) = 2){
print("Occurence data has the right ncol")
} else if (ncol(occ) = 3){
print("removing col 1")
occ <- occ[,2:3]
} else {
print("ERROR: WRONG INPUT DATA (OCCURENCE)")
}
ncol(occ)
ncol(occ) = 2
ncol(occ) == 2
# remove first column
if(ncol(occ) == 2){
print("Occurence data has the right ncol")
} else if (ncol(occ) == 3){
print("removing col 1")
occ <- occ[,2:3]
} else {
print("ERROR: WRONG INPUT DATA (OCCURENCE)")
}
occ <- read.csv(occurence)
# remove first column
if(ncol(occ) == 2){
print("Occurence data has the right ncol")
} else if (ncol(occ) == 3){
print("removing col 1")
occ <- occ[,2:3]
} else {
print("ERROR: WRONG INPUT DATA (OCCURENCE)")
}
gc()
getwd()
load("~/Documents/MegaSync/Documents/Uni/MSc/Kullmer/PlantWare/R_Logic/.RData")
getwd()
library("rgbif")
library(data.table)
library(dplyr)
library(tidyverse)
library(sf) # sf stands for "Simple Features", spatial data in R
SPECIES_CLEANED <- read_lines(file = "./data/SPECIES.txt")
getwd()
setwd("./../")
SPECIES_CLEANED <- read_lines(file = "./data/SPECIES.txt")
DATA_LIST <- list()
for(i in 1:length(SPECIES_CLEANED)){
TEMP_FRAME <- occ_search(scientificName = SPECIES_CLEANED[i], country = "ET")
DATA_LIST[[SPECIES_CLEANED[i]]]$SPECIES <- as.list(TEMP_FRAME$data$species)
DATA_LIST[[SPECIES_CLEANED[i]]]$LONGITUDE <- as.list(TEMP_FRAME$data$decimalLongitude)
DATA_LIST[[SPECIES_CLEANED[i]]]$LATITUDE <- as.list(TEMP_FRAME$data$decimalLatitude)
JOTARO_KUJO <- rbindlist(DATA_LIST)
}
DIO_BRANDO$SPECIES <- as.character(unlist(JOTARO_KUJO))
as.character(unlist(JOTARO_KUJO$SPECIES))
DIO_BRANDO <- data.frame(SPECIES, LATITUDE, LONGITUDE)
DIO_BRANDO <- data.frame(matrix(ncol=nrow(JOTARO_KUJO), nrow= 3))
DIO_BRANDO$SPECIES <- as.character(unlist(JOTARO_KUJO))
DIO_BRANDO <- data.frame(matrix(nrow=nrow(JOTARO_KUJO), ncol= 3))
DIO_BRANDO$SPECIES <- as.character(unlist(JOTARO_KUJO))
DIO_BRANDO <- data.frame(matrix(nrow=nrow(unlist(JOTARO_KUJO), ncol= 3))
DIO_BRANDO$SPECIES <- as.character(unlist(JOTARO_KUJO))
DIO_BRANDO$LATITUDE <- as.numeric(unlist(JOTARO_KUJO$LATITUDE))
DIO_BRANDO$LONGITUDE <- as.numeric(unlist(JOTARO_KUJO$LONGITUDE))
JOTARO_KUJO <- JOTARO_KUJO %>% filter(!is.na(LONGITUDE), !is.na(LATITUDE)) %>%
filter(LONGITUDE > 3, LATITUDE < 14)
return(JOTARO_KUJO)
}
print("Done with occ_grabber!")
DIO_BRANDO <- data.frame(matrix(nrow=nrow(unlist(JOTARO_KUJO)), ncol= 3))
DIO_BRANDO <- data.frame(matrix(nrow=nrow(unlist(JOTARO_KUJO$SPECIES)), ncol= 3))
DIO_BRANDO$LATITUDE <- as.numeric(unlist(JOTARO_KUJO$LATITUDE))
DIO_BRANDO$SPECIES <- as.character(unlist(JOTARO_KUJO))
DIO_BRANDO$LONGITUDE <- as.numeric(unlist(JOTARO_KUJO$LONGITUDE))
DIO_BRANDO$SPECIES <- as.character(unlist(JOTARO_KUJO))
View(JOTARO_KUJO)
DIO_BRANDO$SPECIES <- unlist(JOTARO_KUJO)
DIO_BRANDO$SPECIES <- unlist(JOTARO_KUJO$SPECIES)
View(DIO_BRANDO)
DIO_BRANDO <- data.frame()
DIO_BRANDO$SPECIES <- unlist(JOTARO_KUJO$SPECIES)
row_number(JOTARO_KUJO)
row_number(JOTARO_KUJO$SPECIES)
row_number(unlist(JOTARO_KUJO$SPECIES))
nrow(unlist(JOTARO_KUJO$SPECIES))
count(unlist(JOTARO_KUJO$SPECIES))
length(unlist(JOTARO_KUJO))
length(unlist(JOTARO_KUJO$SPECIES)
)
DIO_BRANDO <- data.frame(matrix(nrow =length(unlist(JOTARO_KUJO$SPECIES)), ncol = 3))
DIO_BRANDO[1] <- unlist(JOTARO_KUJO)
DIO_BRANDO[1] <- unlist(JOTARO_KUJO$SPECIES)
View(DIO_BRANDO)
DIO_BRANDO[2] <- as.numeric(unlist(JOTARO_KUJO$LATITUDE))
unlist(JOTARO_KUJO$LATITUDE)
unlist(JOTARO_KUJO$LONGITUDE)
unlist(JOTARO_KUJO$SPECIES)
unlist(JOTARO_KUJO$LONGITUDE)
View(JOTARO_KUJO)
JOTARO_KUJO %>% filter(is.na())
JOTARO_KUJO %>% filter(is.na(TRUE))
JOTARO_KUJO %>% drop_na()
View(JOTARO_KUJO)
View(DIO_BRANDO)
JOTARO_KUJO <- JOTARO_KUJO %>% drop_na()
DIO_BRANDO <- data.frame(matrix(nrow =length(unlist(JOTARO_KUJO$SPECIES)), ncol = 3))
DIO_BRANDO[1] <- unlist(JOTARO_KUJO$SPECIES)
DIO_BRANDO[2] <- as.numeric(unlist(JOTARO_KUJO$LATITUDE))
DIO_BRANDO[3] <- as.numeric(unlist(JOTARO_KUJO$LONGITUDE))
colnames(DIO_BRANDO) <- c("SPECIES", "LATITUDE", "LONGITUDE")
DIO_BRANDO <- DIO_BRANDO %>% filter(!is.na(LONGITUDE), !is.na(LATITUDE)) %>%
filter(LONGITUDE > 3, LATITUDE < 14)
gc()
library(svMisc)
install.packages("svMisc")
library(svMisc)
source("./R_Logic/maxent_calc.R")
# load in our occurences
# we can replace the paste in the row below with a function variable
occurence <- paste("./output/occurences.csv")
maxent_resolve("./data/raster")
fnames <- list.files(path="./data/raster",
pattern = ".asc$", full.names = TRUE)
# create a Rasterstack of our Predictors
predictors <- stack(fnames)
# load in our occurences
# we can replace the paste in the row below with a function variable
occurence <- paste("./output/occurences.csv")
occ <- read.csv(occurence)
# remove first column
if(ncol(occ) == 2){
print("Occurence data has the right ncol")
} else if (ncol(occ) == 3){
print("removing col 1")
occ <- occ[,2:3]
} else {
print("ERROR: WRONG INPUT DATA (OCCURENCE)")
}
# We are gonna use 20% of the dataset as a testing sample
fold <- kfold(occ, k=5)
occtest <- occ[fold == 1, ]
occtrain <- occ[fold != 1, ]
me <- maxent(predictors, occtrain, path = "./output/maxent_output/")
View(predictors)
gc()
View(occtrain)
View(predictors)
predictors@crs@projargs
gc()
